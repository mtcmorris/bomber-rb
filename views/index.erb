<!DOCTYPE html>
<html>
<head>
    <title>Bomberman Game Server</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f0f0f0;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .game-info {
            background: white;
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .game-grid {
            display: inline-block;
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .grid {
            display: grid;
            grid-template-columns: repeat(15, 30px);
            gap: 1px;
            background-color: #333;
            padding: 10px;
            border-radius: 4px;
        }
        
        .cell {
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            font-size: 14px;
            position: relative;
        }
        
        .cell.empty { background-color: #ddd; }
        .cell.hard-wall { background-color: #333; color: white; }
        .cell.soft-wall { background-color: #8B4513; color: white; }
        .cell.powerup-bomb { background-color: #FFD700; color: #333; }
        .cell.powerup-fire { background-color: #FF4500; color: white; }
        
        .player {
            background-color: #4CAF50;
            color: white;
            border-radius: 50%;
            font-size: 12px;
        }
        
        .player.player2 { background-color: #2196F3; }
        .player.player3 { background-color: #FF9800; }
        .player.player4 { background-color: #9C27B0; }
        .player.dead { 
            background-color: #666; 
            opacity: 0.5;
        }
        
        .bomb {
            background-color: #f44336;
            color: white;
            border-radius: 50%;
            font-size: 10px;
            animation: pulse 0.5s infinite alternate;
        }
        
        .explosion {
            background-color: #FF6B35;
            color: white;
            font-size: 16px;
            animation: explode 0.5s infinite alternate;
        }
        
        @keyframes pulse {
            from { transform: scale(1); }
            to { transform: scale(1.1); }
        }
        
        @keyframes explode {
            from { transform: scale(1); background-color: #FF6B35; }
            to { transform: scale(1.2); background-color: #FF4500; }
        }
        
        .side-panels {
            display: flex;
            flex-direction: column;
            margin-left: 20px;
            gap: 20px;
        }
        
        .players-list, .leaderboard {
            background: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            min-width: 300px;
        }
        
        .player-info {
            margin-bottom: 10px;
            padding: 10px;
            border-left: 4px solid #4CAF50;
            background-color: #f9f9f9;
        }
        
        .player-info.player2 { border-color: #2196F3; }
        .player-info.player3 { border-color: #FF9800; }
        .player-info.player4 { border-color: #9C27B0; }
        .player-info.dead { 
            border-color: #666; 
            opacity: 0.5;
        }
        
        .main-content {
            display: flex;
            align-items: flex-start;
        }
        
        .status {
            margin-top: 10px;
            padding: 10px;
            border-radius: 4px;
        }
        
        .status.running { background-color: #d4edda; color: #155724; }
        .status.game-over { background-color: #f8d7da; color: #721c24; }
        
        .leaderboard-entry {
            margin-bottom: 8px;
            padding: 8px;
            border-left: 4px solid #ccc;
            background-color: #f9f9f9;
            font-size: 14px;
        }
        
        .leaderboard-entry.rank1 { border-color: #FFD700; background-color: #fffbf0; }
        .leaderboard-entry.rank2 { border-color: #C0C0C0; background-color: #fafafa; }
        .leaderboard-entry.rank3 { border-color: #CD7F32; background-color: #fdf9f6; }
        
        .leaderboard-entry .name {
            font-weight: bold;
            color: #333;
        }
        
        .leaderboard-entry .stats {
            font-size: 12px;
            color: #666;
            margin-top: 2px;
        }
        
        .leaderboard-entry.dead {
            opacity: 0.6;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Bomberman Game Server</h1>
        
        <div class="game-info">
            <h2>Game Status</h2>
            <div id="game-status" class="status running">Loading...</div>
            <p><strong>Tick:</strong> <span id="tick">0</span></p>
            <p><strong>Connected Clients:</strong> <span id="client-count">0</span></p>
        </div>
        
        <div class="main-content">
            <div class="game-grid">
                <h3>Game Grid</h3>
                <div id="grid" class="grid">
                    <!-- Grid will be populated by JavaScript -->
                </div>
            </div>
            
            <div class="side-panels">
                <div class="players-list">
                    <h3>Players</h3>
                    <div id="players">
                        <!-- Players will be populated by JavaScript -->
                    </div>
                </div>
                
                <div class="leaderboard">
                    <h3>Leaderboard</h3>
                    <div id="leaderboard">
                        <!-- Leaderboard will be populated by JavaScript -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let gameState = null;
        
        function updateGameDisplay() {
            fetch('/api/game_state')
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        document.getElementById('game-status').textContent = 'Game not running';
                        document.getElementById('game-status').className = 'status game-over';
                        return;
                    }
                    
                    gameState = data;
                    updateGrid();
                    updatePlayers();
                    updateStatus();
                })
                .catch(error => {
                    console.error('Error fetching game state:', error);
                    document.getElementById('game-status').textContent = 'Connection error';
                    document.getElementById('game-status').className = 'status game-over';
                });
        }
        
        function updateGrid() {
            const gridElement = document.getElementById('grid');
            gridElement.innerHTML = '';
            
            const grid = gameState.grid;
            const players = gameState.players;
            const bombs = gameState.bombs;
            const explosions = gameState.explosions || [];
            
            for (let y = 0; y < grid.length; y++) {
                for (let x = 0; x < grid[y].length; x++) {
                    const cell = document.createElement('div');
                    cell.className = 'cell';
                    
                    const cellValue = grid[y][x];
                    
                    // Check for explosions at this position
                    const explosionHere = explosions.find(explosion => explosion.x === x && explosion.y === y);
                    
                    // Check for players at this position
                    const playersHere = Object.entries(players).filter(([id, player]) => 
                        player.x === x && player.y === y && player.alive
                    );
                    
                    // Check for bombs at this position
                    const bombHere = bombs.find(bomb => bomb.x === x && bomb.y === y);
                    
                    if (explosionHere) {
                        cell.className += ' explosion';
                        cell.textContent = 'ðŸ’¥';
                    } else if (playersHere.length > 0) {
                        const [playerId, player] = playersHere[0];
                        cell.className += ' player ' + playerId;
                        if (!player.alive) cell.className += ' dead';
                        cell.textContent = playerId.replace('player', 'P');
                    } else if (bombHere) {
                        cell.className += ' bomb';
                        cell.textContent = bombHere.ticks_until_explosion;
                    } else {
                        switch (cellValue) {
                            case '#':
                                cell.className += ' hard-wall';
                                cell.textContent = '#';
                                break;
                            case '+':
                                cell.className += ' soft-wall';
                                cell.textContent = '+';
                                break;
                            case 'B':
                                cell.className += ' powerup-bomb';
                                cell.textContent = 'B';
                                break;
                            case 'F':
                                cell.className += ' powerup-fire';
                                cell.textContent = 'F';
                                break;
                            default:
                                cell.className += ' empty';
                                break;
                        }
                    }
                    
                    gridElement.appendChild(cell);
                }
            }
        }
        
        function updatePlayers() {
            const playersElement = document.getElementById('players');
            playersElement.innerHTML = '';
            
            Object.entries(gameState.players).forEach(([playerId, player]) => {
                const playerDiv = document.createElement('div');
                playerDiv.className = 'player-info ' + playerId;
                if (!player.alive) playerDiv.className += ' dead';
                
                playerDiv.innerHTML = `
                    <strong>${playerId}</strong><br>
                    Position: (${player.x}, ${player.y})<br>
                    Status: ${player.alive ? 'Alive' : 'Dead'}<br>
                    Bombs: ${player.bombs_available}<br>
                    Blast Radius: ${player.blast_radius}
                `;
                
                playersElement.appendChild(playerDiv);
            });
        }
        
        function updateStatus() {
            document.getElementById('tick').textContent = gameState.tick;
            
            const statusElement = document.getElementById('game-status');
            if (gameState.game_over) {
                if (gameState.winner) {
                    statusElement.textContent = `Game Over - Winner: ${gameState.winner}`;
                } else {
                    statusElement.textContent = 'Game Over - Draw';
                }
                statusElement.className = 'status game-over';
            } else {
                statusElement.textContent = 'Game Running';
                statusElement.className = 'status running';
            }
        }
        
        function updateClientCount() {
            fetch('/api/clients')
                .then(response => response.json())
                .then(clients => {
                    document.getElementById('client-count').textContent = clients.length;
                })
                .catch(error => {
                    console.error('Error fetching client count:', error);
                });
        }
        
        function updateLeaderboard() {
            fetch('/api/leaderboard')
                .then(response => response.json())
                .then(leaderboard => {
                    const leaderboardElement = document.getElementById('leaderboard');
                    leaderboardElement.innerHTML = '';
                    
                    leaderboard.forEach((player, index) => {
                        const entry = document.createElement('div');
                        entry.className = 'leaderboard-entry';
                        if (index === 0) entry.className += ' rank1';
                        else if (index === 1) entry.className += ' rank2';
                        else if (index === 2) entry.className += ' rank3';
                        if (!player.alive) entry.className += ' dead';
                        
                        const status = player.alive ? 
                            `Alive (${player.current_survival}s)` : 
                            `Dead (respawning...)`;
                        
                        entry.innerHTML = `
                            <div class="name">#${index + 1} ${player.name}</div>
                            <div class="stats">
                                <strong>Best:</strong> ${player.best_kills} kills, ${player.best_survival}s alive<br>
                                <strong>Current:</strong> ${player.current_kills} kills, ${status}<br>
                                <strong>Total:</strong> ${player.kills} kills, ${player.deaths} deaths
                            </div>
                        `;
                        
                        leaderboardElement.appendChild(entry);
                    });
                })
                .catch(error => {
                    console.error('Error fetching leaderboard:', error);
                });
        }
        
        // Update every second
        setInterval(() => {
            updateGameDisplay();
            updateClientCount();
            updateLeaderboard();
        }, 1000);
        
        // Initial load
        updateGameDisplay();
        updateClientCount();
        updateLeaderboard();
    </script>
</body>
</html>